"use strict";(self.webpackChunkphoto_cli_documentation=self.webpackChunkphoto_cli_documentation||[]).push([[382],{5923:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var n=t(5893),a=t(1151);const i={sidebar_position:3},s="Archive",r={id:"commands-verbs/archive",title:"Archive",description:"Archives photos into specific folder and indexing photo taken date, address (reverse geocode) information into SQLite database.",source:"@site/docs/commands-verbs/archive.md",sourceDirName:"commands-verbs",slug:"/commands-verbs/archive",permalink:"/docs/commands-verbs/archive",draft:!1,unlisted:!1,editUrl:"https://github.com/photo-cli/photo-cli.github.io/tree/main/docs/commands-verbs/archive.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Copy",permalink:"/docs/commands-verbs/copy"},next:{title:"Info",permalink:"/docs/commands-verbs/info"}},d={},c=[];function l(e){const o={code:"code",h1:"h1",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.h1,{id:"archive",children:"Archive"}),"\n",(0,n.jsx)(o.p,{children:"Archives photos into specific folder and indexing photo taken date, address (reverse geocode) information into SQLite database."}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{children:"photo-cli help archive\n"})}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{children:"  -o, --output                      (MUST) File system path to create new organized folder. A new folder hierarchy will be created on that location with new file names. (will create folder if not exist)\n\n  -i, --input                       (Default current executing folder) File system path to read & copy photos from. ( there will be no modification on the input path )\n\n  -d, --dry-run                     (Optional) Simulate the same process without writing to the output folder. (no extra parameter needed)\n\n  -x, --invalid-format              (Optional) Action to do when a photo format is invalid. ( Continue: 0 [default], PreventProcess: 1 )\n\n  -t, --no-taken-date               (Optional) Action to do when a photo with a no taken date. ( Continue: 0 [default], PreventProcess: 1 )\n\n  -c, --no-coordinate               (Optional) Action to do when a photo with a no coordinate. ( Continue: 0 [default], PreventProcess: 1 )\n\n  -e, --reverse-geocode             (Optional) Third-party provider to resolve photo taken address by photo's coordinates. ( Disabled: 0 [default], BigDataCloud: 1, OpenStreetMapFoundation: 2, GoogleMaps:\n                                    3, LocationIq: 5 )\n\n  -b, --bigdatacloud-key            (Optional) API key needed to use BigDataCloud. https://www.bigdatacloud.com/geocoding-apis/reverse-geocode-to-city-api/ (Instead of using this option, environment name:\n                                    PHOTO_CLI_BIG_DATA_CLOUD_API_KEY can be used or `BigDataCloudApiKey` key can be set via settings command. )\n\n  -u, --bigdatacloud-levels         (Optional) Admin levels separated with space. ( To see which level correspond to which address level, you may use `photo-cli address` to see the full response returned\n                                    from BigDataCloud. )\n\n  -m, --googlemaps-types            (Optional) GoogleMaps address types separated with space. ( To see which level correspond to which address level, you may use `photo-cli address` to see the full\n                                    response returned from GoogleMaps. )\n\n  -k, --googlemaps-key              (Optional) API key needed to use GoogleMaps. https://developers.google.com/maps/documentation/geocoding/overview/ (Instead of using this option, environment name:\n                                    PHOTO_CLI_GOOGLE_MAPS_API_KEY can be used or `GoogleMapsApiKey` key can be set via settings command. )\n\n  -r, --openstreetmap-properties    (Optional) OpenStreetMap properties separated with space. ( To see which level correspond to which address level, you may use `photo-cli address` to see the full\n                                    response returned from OpenStreetMap provider. )\n\n  -q, --locationiq-key              (Optional) API key needed to use LocationIq. https://locationiq.com/docs/ (Instead of using this option, environment name: PHOTO_CLI_LOCATIONIQ_API_KEY can be used or\n                                    `LocationIqApiKey` key can be set via settings command. )\n\n  -h, --has-paid-license            (Optional) Bypass the free rate limit if you have paid license. ( For LocationIq. )\n\n  -l, --language                    (Optional) Language/culture value to get localized address result for BigDataCloud ( https://www.bigdatacloud.com/supported-languages/ ) and GoogleMaps\n                                    (https://developers.google.com/maps/faq#languagesupport ).\n\n  --help                            Display this help screen.\n\n  --version                         Display version information.\n\nNOTES:\n- Instead of option names (for ex: DateTimeWithMinutes), you may use options values too. (for ex: 3)\n- You can use relative folder paths. If you use the input folder as the working directory, you don't need to use the input argument.\n\nEXAMPLE USAGES:\n- Archive all photos in current folder (and it's subfolders recursively) into output folder by [year]/[month]/[day] hierarchy with a file name photo taken date with seconds prefixed by file hash. Saves all photo taken information into local SQLite database.\n\nExample with long argument names;\nphoto-cli archive --output [output-folder]\n\nExample with short argument names;\nphoto-cli archive -o [output-folder]\n\n- Archive all photos in input folder (and it's subfolders recursively), fetches all photo's reverse geocode information, copies into output folder by [year]/[month]/[day] hierarchy with a file name photo taken date with seconds prefixed by file hash. Saves all photo taken information and it's address (reverse geocode) into local SQLite database.\n\nExample with long argument names;\nphoto-cli archive --no-coordinate PreventProcess --reverse-geocode OpenStreetMapFoundation --input [input-folder] --output [output-folder] --openstreetmap-properties country city town suburb --no-taken-date PreventProcess --invalid-format PreventProcess\n\nExample with short argument names;\nphoto-cli archive -c PreventProcess -e OpenStreetMapFoundation -i [input-folder] -o [output-folder] -r country city town suburb -t PreventProcess -x PreventProcess\n"})})]})}function p(e={}){const{wrapper:o}={...(0,a.a)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},1151:(e,o,t)=>{t.d(o,{Z:()=>r,a:()=>s});var n=t(7294);const a={},i=n.createContext(a);function s(e){const o=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function r(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(i.Provider,{value:o},e.children)}}}]);