"use strict";(self.webpackChunkphoto_cli_documentation=self.webpackChunkphoto_cli_documentation||[]).push([[818],{7445:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>p,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var n=t(5893),s=t(1151);const a={sidebar_position:5},r="Address",i={id:"commands-verbs/address",title:"Address",description:"Get address (reverse geocode) of single photo.",source:"@site/docs/commands-verbs/address.md",sourceDirName:"commands-verbs",slug:"/commands-verbs/address",permalink:"/docs/commands-verbs/address",draft:!1,unlisted:!1,editUrl:"https://github.com/photo-cli/photo-cli.github.io/tree/main/docs/commands-verbs/address.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Info",permalink:"/docs/commands-verbs/info"},next:{title:"Settings",permalink:"/docs/commands-verbs/settings"}},p={},d=[];function l(e){const o={code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.h1,{id:"address",children:"Address"}),"\n",(0,n.jsx)(o.p,{children:"Get address (reverse geocode) of single photo."}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{children:"photo-cli help address\n"})}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{children:"  -i, --input                       (Default current executing folder) File system path to read & copy photos from. ( there will be no modification on the input path )\n\n  -e, --reverse-geocode             (Optional) Third-party provider to resolve photo taken address by photo's coordinates. ( Disabled: 0 [default], BigDataCloud: 1, OpenStreetMapFoundation: 2, GoogleMaps: 3, LocationIq: 5 )\n\n  -t, --type                        (MUST) Response list detail level. ( AllAvailableProperties: 0, SelectedProperties: 1, FullResponse: 2 )\n\n  -b, --bigdatacloud-key            (Optional) API key needed to use BigDataCloud. https://www.bigdatacloud.com/geocoding-apis/reverse-geocode-to-city-api/ (Instead of using this option, environment name: PHOTO_CLI_BIG_DATA_CLOUD_API_KEY can be used. )\n\n  -u, --bigdatacloud-levels         (Optional) Admin levels separated with space. ( To see which level correspond to which address level, you may use `photo-cli address` to see full response returned from BigDataCloud. )\n\n  -m, --googlemaps-types            (Optional) GoogleMaps address types separated with space. ( To see which level correspond to which address level, you may use `photo-cli address` to see full response returned from GoogleMaps. )\n\n  -k, --googlemaps-key              (Optional) API key needed to use GoogleMaps. https://developers.google.com/maps/documentation/geocoding/overview/ (Instead of using this option, environment name: PHOTO_CLI_GOOGLE_MAPS_API_KEY can be used. )\n\n  -r, --openstreetmap-properties    (Optional) OpenStreetMap properties separated with space. ( To see which level correspond to which address level, you may use `photo-cli address` to see full response returned from OpenStreetMap provider. )\n\n  -q, --locationiq-key              (Optional) API key needed to use LocationIq. https://locationiq.com/docs/ (Instead of using this option, environment name: PHOTO_CLI_LOCATIONIQ_API_KEY can be used. )\n\n  -h, --has-paid-license            (Optional) Bypass rate limit if you have paid license. ( For LocationIq. )\n\n  -l, --language                    (Optional) Language/culture value to get localized address result for BigDataCloud ( https://www.bigdatacloud.com/supported-languages/ ) and GoogleMaps (https://developers.google.com/maps/faq#languagesupport ).\n\n  --help                            Display this help screen.\n\n  --version                         Display version information.\n\nNOTES:\n- Instead of option names (for ex: DateTimeWithMinutes), you may use options values too. (for ex: 3)\n- You can use relative folder paths. If you use the input folder as the working directory, you don't need to use the input argument.\n\nEXAMPLE USAGES:\n- All properties\n\nExample with long argument names;\nphoto-cli address --reverse-geocode OpenStreetMapFoundation --input [photo-path].jpg\n\nExample with short argument names;\nphoto-cli address -e OpenStreetMapFoundation -i [photo-path].jpg\n\n- Selected properties\n\nExample with long argument names;\nphoto-cli address --reverse-geocode OpenStreetMapFoundation --input [photo-path].jpg --openstreetmap-properties country city town suburb --type SelectedProperties\n\nExample with short argument names;\nphoto-cli address -e OpenStreetMapFoundation -i [photo-path].jpg -r country city town suburb -t SelectedProperties\n\n- Show full response\n\nExample with long argument names;\nphoto-cli address --reverse-geocode OpenStreetMapFoundation --input [photo-path].jpg --type FullResponse\n\nExample with short argument names;\nphoto-cli address -e OpenStreetMapFoundation -i [photo-path].jpg -t FullResponse\n"})})]})}function c(e={}){const{wrapper:o}={...(0,s.a)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},1151:(e,o,t)=>{t.d(o,{Z:()=>i,a:()=>r});var n=t(7294);const s={},a=n.createContext(s);function r(e){const o=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(a.Provider,{value:o},e.children)}}}]);